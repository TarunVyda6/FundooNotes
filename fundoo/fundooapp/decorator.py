from rest_framework import status
from django.http import HttpResponse
import json
from fundooapp.models import *
import jwt
from services.cache import Cache
from services.encrypt import Encrypt
import logging


def user_login_required(view_func):
    """
    This function will check if the token generated by user while signing in is matching with token provided by user
    """

    def wrapper(request, *args, **kwargs):
        """
        this function checks the token authentication and retuns the function if token is authenticated
        """
        result = {'message': 'some other issue please try after some time', 'status': False}
        try:
            token = request.META['HTTP_AUTHORIZATION']
            decoded_token = Encrypt.decode(token)
            cache = Cache.get_instance()
            if cache.get_cache("TOKEN_" + str(decoded_token['id']) + "_AUTH") is not None:
                kwargs['user'] = Account.objects.get(id=decoded_token['id'])
                result['message'] = 'token verification successful'
                result['status'] = True
                logging.debug('{} status_code = {}'.format(result, status.HTTP_200_OK))
                return view_func(request, *args, **kwargs)

            result['message'] = "you are not logged in"
            logging.debug('{} status_code = {}'.format(result, status.HTTP_400_BAD_REQUEST))
            HttpResponse.status_code = status.HTTP_400_BAD_REQUEST
            return HttpResponse(json.dumps(result), HttpResponse.status_code)
        except jwt.ExpiredSignatureError as e:
            result['message'] = 'Activation Expired'
            logging.exception('{} exception = {}, status_code = {}'.format(result, str(e), status.HTTP_400_BAD_REQUEST))
            HttpResponse.status_code = status.HTTP_400_BAD_REQUEST
            return HttpResponse(json.dumps(result), HttpResponse.status_code)
        except jwt.exceptions.DecodeError as e:
            result['message'] = 'Invalid Token'
            logging.exception(
                '{}, exception = {}, status_code = {}'.format(result, str(e), status.HTTP_400_BAD_REQUEST))
            HttpResponse.status_code = status.HTTP_400_BAD_REQUEST
            return HttpResponse(json.dumps(result), HttpResponse.status_code)
        except KeyError as e:
            result['message'] = 'please provide token key'
            logging.exception(
                '{}, exception = {}, status_code = {}'.format(result, str(e), status.HTTP_400_BAD_REQUEST))
            HttpResponse.status_code = status.HTTP_400_BAD_REQUEST
            return HttpResponse(json.dumps(result), HttpResponse.status_code)
        except Exception as e:
            result['message'] = 'some other issue please try after some time'
            logging.exception(
                '{}, exception = {}, status_code = {}'.format(result, str(e), status.HTTP_400_BAD_REQUEST))
            HttpResponse.status_code = status.HTTP_400_BAD_REQUEST
            return HttpResponse(json.dumps(result), HttpResponse.status_code)

    return wrapper
